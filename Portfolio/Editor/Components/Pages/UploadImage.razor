@inject ILogger<UploadImage> Logger
@inject MinioService MinioService

<div class="row">
    <div class="col-md-8">
        <div class="mb-3">
            <label for="fileInput" class="form-label">Select Photo</label>
            <InputFile id="fileInput" accept=".jpg,.jpeg,.png" OnChange="HandleImageChange" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputText id="description" class="form-control" @bind-Value="NewPhoto.Description" />
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(photoUrl))
{
    <div class="mt-3">
        <h5>Uploaded image:</h5>
        <img src="@photoUrl" class="img-thumbnail" style="max-height: 300px;" />
        <p>@NewPhoto.Description</p>
        <div class="mt-2">
            <button class="btn btn-danger" @onclick="DeletePhoto">Delete</button>
        </div>
    </div>
}

@code {
    private readonly string bucketName = "blog-photos";

    [Parameter]
    public Photo NewPhoto { get; set; } = new Photo();

    private string photoUrl;
    
    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
            return;

        try
        {
            // Optional: limit max upload size to 10MB
            await using var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024);

            // Upload the file immediately
            await MinioService.UploadPhoto(bucketName, stream, file.Name);

            // Optionally, display confirmation or preview
            Logger.LogInformation($"Uploaded '{file.Name}' successfully, to bucket {bucketName}!");
            photoUrl = await MinioService.GetPhotoUrlAsync(bucketName, file.Name);
        }
        catch (Exception ex)
        {
            Logger.LogError($"Upload failed: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task DeletePhoto()
    {
        if (string.IsNullOrEmpty(NewPhoto.ObjectName))
            return;

        try
        {
            await MinioService.DeletePhoto(bucketName, NewPhoto.ObjectName);
            Logger.LogInformation($"Deleted '{NewPhoto.ObjectName}' successfully!");
            photoUrl = null;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Delete failed: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
}