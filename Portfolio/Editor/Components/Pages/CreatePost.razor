@page "/create-post"
@inject IBlogPostService BlogPostService
@inject MinioService MinioService
@using System.IO

@* <h3>Upload Photo</h3> *@
@* *@
@* <div class="row"> *@
@*     <div class="col-md-8"> *@
@*         <EditForm method="post" Model="newPhoto" OnValidSubmit="SubmitPhoto" FormName="UploadPhoto" Enhance> *@
@*             <DataAnnotationsValidator /> *@
@*             <ValidationSummary class="text-danger" /> *@
@*             <div class="mb-3"> *@
@*                 <label for="fileInput" class="form-label">Select Photo</label> *@
@*                 <InputFile id="fileInput" accept=".jpg,.jpeg,.png" OnChange="HandleImageChange" /> *@
@*             </div> *@
@* *@
@*             <div class="mb-3"> *@
@*                 <label for="description" class="form-label">Description</label> *@
@*                 <InputText id="description" class="form-control" @bind-Value="newPhoto.PhotoName" /> *@
@*             </div> *@
@*             <button type="submit" class="btn btn-primary">Add Photo</button> *@
@*         </EditForm> *@
@*     </div> *@
@* </div> *@
@* <div class="row"> *@
@*     <div class="col"> *@
@*         @if (message != null) *@
@*         { *@
@*             <p>@message</p> *@
@*         } *@
@*     </div> *@
@*     <div class="col"> *@
@*         @if (newPhoto.PhotoName != null) *@
@*         { *@
@*             <p>@newPhoto.PhotoName</p> *@
@*         } *@
@*         else *@
@*         { *@
@*             <p>No photo selected.</p> *@
@*         } *@
@*     </div> *@
@* </div> *@
@* <div class="row"> *@
@*     @if (!string.IsNullOrEmpty(imagePreview)) *@
@*     { *@
@*         <img src="@imagePreview" alt="Image Preview" style="max-width: 100%; max-height: 400px;"/> *@
@*     } *@
@* </div> *@
@* *@
@* @if (_message != null) *@
@* { *@
@*     <Alert Color="AlertColor.Success" Class="mt-3">@_message</Alert> *@
@* } *@


<h3>Create Blog Post</h3>

<EditForm Model="@newPost" OnValidSubmit="HandleValidSubmit" FormName="NewPostForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputGroup class="mb-3">
        <InputGroupText>Title</InputGroupText>
        <InputText @bind-Value="newPost.Title" />
    </InputGroup>

    <InputGroup class="mb-3">
        <InputGroupText>Goal</InputGroupText>
        <InputText @bind-Value="newPost.Goal" />
    </InputGroup>

    <InputGroup class="mb-3">
        <InputGroupText>Content</InputGroupText>
        <InputTextArea @bind-Value="newPost.Content" rows="6" />
    </InputGroup>

    <InputGroup class="mb-3">
        <InputGroupText>Publish Date</InputGroupText>
        <InputDate @bind-Value="newPost.PublishDate" />
    </InputGroup>

    <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" IsLoading="@isSaving">
        Save
    </Button>

    @if (message is not null)
    {
        <Alert Color="AlertColor.Success" Class="mt-3">@message</Alert>
    }
</EditForm>

@code {
    private BlogPost newPost = new BlogPost()
        {
            Title = "",
            Goal = "",
            Content = "",
            PublishDate = DateTime.UtcNow
        };
    private bool isSaving = false;
    private string? message;

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        message = null;
        StateHasChanged();
        var id = await BlogPostService.AddBlogPostAsync(newPost);
        isSaving = false;
        message = id > 0 ? "Post saved successfully!" : "Post not saved successfully";

        newPost = new BlogPost()
            {
                Title = "",
                Goal = "",
                Content = "",
                PublishDate = DateTime.UtcNow
            };
    }
    
    //
    // private IBrowserFile? selectedFile;
    // private string? imagePreview;
    // private bool isUploading = false;
    // private string? _message;
    //
    // [SupplyParameterFromForm(FormName = "UploadPhoto")]
    // Photo newPhoto { get; set; } = new Photo();
    //
    // [Parameter]
    // public EventCallback<Photo> OnValidSubmit { get; set; }
    //
    // private async Task SubmitPhoto()
    // {
    //     await OnValidSubmit.InvokeAsync(newPhoto);
    //     message = "Photo added successfully!";
    // }
    //
    // private async Task HandleImageChange(InputFileChangeEventArgs e)
    // {
    // }
    //
    // private async Task<string> GetImagePreview(IBrowserFile file)
    // {
    //     var resizedImage = await file.RequestImageFileAsync("image/jpeg", 300, 300);
    //     return resizedImage;
    // }
    //
    // private async Task UploadPhoto()
    // {
    //     if (selectedFile == null) return;
    //
    //     isUploading = true;
    //     _message = null;
    //     StateHasChanged();
    //
    //     try
    //     {
    //         await using var stream = selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10); // 10MB limit
    //         await MinioService.UploadPhoto(stream, selectedFile.Name);
    //         message = "Photo uploaded successfully!";
    //     }
    //     catch (Exception ex)
    //     {
    //         message = $"Error: {ex.Message}";
    //     }
    //     finally
    //     {
    //         isUploading = false;
    //         StateHasChanged();
    //     }
    // }
}