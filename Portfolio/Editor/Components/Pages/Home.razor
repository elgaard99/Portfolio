@page "/"
@inject NavigationManager Nav

@inject ILogger<Home> Logger
@inject MinioService MinioService

<h3>Upload Photo</h3>

<div class="row">
    <div class="col-md-8">
        <EditForm method="post" Model="newPhoto" OnValidSubmit="SubmitPhoto" FormName="UploadPhoto" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="fileInput" class="form-label">Select Photo</label>
                <InputFile id="fileInput" accept=".jpg,.jpeg,.png" OnChange="HandleImageChange" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText id="description" class="form-control" @bind-Value="newPhoto.Name" />
            </div>
            <button type="submit" class="btn btn-primary">Add Photo</button>
        </EditForm>
    </div>
</div>
<div class="row">
    <div class="col">
        @if (message != null)
        {
            <p>@message</p>
        }
    </div>
    <div class="col">
        @if (newPhoto.Name != null)
        {
            <p>@newPhoto.Name</p>
        }
        else
        {
            <p>No photo selected.</p>
        }
    </div>
</div>
<div class="row">
    @if (!string.IsNullOrEmpty(imagePreview))
    {
        <img src="@imagePreview" alt="Image Preview" style="max-width: 100%; max-height: 400px;"/>
    }
</div>

@if (message != null)
{
    <Alert Color="AlertColor.Success" Class="mt-3">@message</Alert>
}

@code {
    private IBrowserFile? selectedFile;
    private string? imagePreview;
    private bool isUploading = false;
    private string? message;
    
    [SupplyParameterFromForm(FormName = "UploadPhoto")]
    Photo newPhoto { get; set; } = new Photo();
    
    [Parameter]
    public EventCallback<Photo> OnValidSubmit { get; set; }
    
    private async Task SubmitPhoto()
    {
        await OnValidSubmit.InvokeAsync(newPhoto);
        message = "Photo added successfully!";
    }
    
    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is null)
            return;

        try
        {
            // Optional: limit max upload size to 10MB
            await using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);

            // Define your bucket (adjust as needed)
            var bucketName = "photos";

            // Upload the file immediately
            await MinioService.UploadPhoto(bucketName, stream, file.Name);

            // Optionally, display confirmation or preview
            Logger.LogInformation($"Uploaded '{file.Name}' successfully, to bucket {bucketName}!");
            imagePreview = await GetImagePreview(file);
        }
        catch (Exception ex)
        {
            Logger.LogError($"Upload failed: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task<string> GetImagePreview(IBrowserFile file)
    {
        return file.Name;
    }

    // protected override void OnInitialized()
    // {
    //     Nav.NavigateTo("/blog", forceLoad: true);
    // }
}