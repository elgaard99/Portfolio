@inject IBlogPostService BlogPostService
@inject IPhotoService PhotoService
@inject MinioService MinioService

<div class="container mt-5 bg-dark text-light p-4 rounded">
    <header class="mb-5 text-center">
        <h1 class="display-4 fw-bold">Portefølje for 4. semester</h1>
    </header>

    <div class="row">
        <!-- Blog list -->
        <div class="col-md-4">
            <div class="list-group">
                @foreach (var post in BlogPosts.OrderByDescending(p => p.PublishDate))
                {
                    var isActive = SelectedPost?.Id == post.Id;
                    <button class="list-group-item list-group-item-action 
                                       @(isActive ? "active bg-primary text-white border-primary" : "bg-secondary text-light border-secondary")"
                            @onclick="() => SelectPost(post)">
                        <div class="d-flex w-100 justify-content-between">
                            <h5 class="mb-1 fw-bold">@post.Title</h5>
                            <small>@post.PublishDate.ToString("MMM dd, yyyy")</small>
                        </div>
                        <p>Mål: @post.Goal</p>
                    </button>
                }
            </div>
        </div>

        <!-- Selected blog content -->
        <div class="col-md-8">
            @if (SelectedPost != null)
            {
                <div class="card bg-secondary text-light shadow-sm border-primary">
                    <div class="card-body">
                        @if (!editing)
                        {
                            <DisplaySelectedPost SelectedPost="@SelectedPost"/>
                        }
                        else
                        {
                            <EditPost
                                UpdatedPost="@updatedPost"
                                OnDeletePhoto="HandlePhotoDeletion"
                                OnPhotoChanged="HandlePhotoChanged"/>
                        }
                    </div>
                    <div class="card-footer bg-transparent border-top border-primary d-flex justify-content-end gap-2">
                        @if (!editing)
                        {
                            <button class="btn btn-primary btn-sm px-3"
                                    title="Edit this post"
                                    @onclick="SwitchMode">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-primary btn-sm px-3"
                                    title="Add Photo"
                                    @onclick="AddPhoto">
                                <i class="bi bi-plus-square"></i> Add Photo
                            </button>
                            
                            <button class="btn btn-success btn-sm px-3"
                                    title="Save changes"
                                    @onclick="SavePost">
                                <i class="bi bi-check-circle"></i> Save
                            </button>

                            <button class="btn btn-secondary btn-sm px-3"
                                    title="Cancel editing"
                                    @onclick="CancelUpdates">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        }

                        <button class="btn btn-danger btn-sm px-3"
                                title="Delete this post"
                                @onclick="DeletePost">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="card bg-secondary text-light border-secondary">
                    <div class="card-body text-muted">
                        Vælg et indlæg fra listen for at se det her.
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    
    [Parameter]
    public BlogPost? SelectedPost { get; set; }
    
    [Parameter]
    public List<BlogPost> BlogPosts { get; set; }
    
    bool editing = false;
    BlogPost updatedPost;
    
    void SelectPost(BlogPost post)
    {
        SelectedPost = post;
    }

    async Task AddPhoto()
    {
        if (SelectedPost == null)
            return;
        
        var newPhoto = new Photo()
        {
            BlogPost = SelectedPost,
            BlogPostId = SelectedPost.Id
        };
        await PhotoService.AddPhotoAsync(newPhoto);
        
        StateHasChanged();
    }
    
    async Task HandlePhotoDeletion(Photo photoToDelete)
    {
        await PhotoService.DeletePhotoAsync(photoToDelete);
        await MinioService.DeletePhoto(photoToDelete);
        
        StateHasChanged();
    }

    async Task HandlePhotoChanged()
    {
        var changedPost = new BlogPost()
        {
            Photos = updatedPost.Photos
        };
        
        await BlogPostService.UpdateBlogPostAsync(changedPost);
        
        StateHasChanged();
    }
    
    async Task DeletePost()
    {
        await BlogPostService.DeleteBlogPostAsync(SelectedPost);
        BlogPosts.Remove(SelectedPost);
        SelectedPost = BlogPosts.FirstOrDefault();
    }

    
    void SwitchMode()
    {
        updatedPost = new BlogPost()
        {
            Id = SelectedPost.Id,
            Title = SelectedPost.Title,
            Goal = SelectedPost.Goal,
            Content = SelectedPost.Content,
            PublishDate = SelectedPost.PublishDate,
            IsVisible = SelectedPost.IsVisible,
            Photos = SelectedPost.Photos
        };
        editing = !editing;
    }

    void CancelUpdates()
    {
        updatedPost = null;
        editing = false;
    }
    
    async Task SavePost()
    {
        await BlogPostService.UpdateBlogPostAsync(updatedPost);

        var selectedPostId = SelectedPost.Id;
        BlogPosts.Remove(SelectedPost);
        BlogPosts.Add(updatedPost);
        SelectedPost = BlogPosts.Find(post => post.Id == selectedPostId);
        
        editing = false;
        StateHasChanged();
    }
}