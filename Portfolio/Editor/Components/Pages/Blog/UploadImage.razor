@inject ILogger<UploadImage> Logger
@inject MinioService MinioService

@if (string.IsNullOrEmpty(NewPhoto.ObjectName))
{
    <div class="row">
        <div class="col-md-8">
            <div class="mb-3">
                <label for="fileInput" class="form-label">Select Photo</label>
                <InputFile id="fileInput" accept=".jpg,.jpeg,.png" OnChange="HandleImageChange" />
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-md-8">
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputText id="description" class="form-control" @bind-Value="NewPhoto.Description" />
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(_photoUrl))
{
    <div class="mt-3">
        <h5>Uploaded image:</h5>
        <img 
            src="@_photoUrl"
            alt="Photo"
            class="img-thumbnail" 
            style="max-height: 300px;" />
        <p>@NewPhoto.Description</p>
    </div>
}

@code {

    [Parameter]
    public Photo NewPhoto { get; set; }
    
    [Parameter]
    public BlogPost BlogPost { get; set; }

    [Parameter]
    public EventCallback OnPhotoChanged { get; set; }

    string? _photoUrl;
    
    private async Task HandleImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
            return;

        try
        {
            var objectName = $"{BlogPost.Id}/{file.Name}";
            
            // Optional: limit max upload size to 10MB
            await using var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024);
            var bucketName = await MinioService.UploadPhoto(objectName, stream);
            
            NewPhoto.ObjectName = objectName;
            NewPhoto.BucketName = bucketName;
            Logger.LogInformation($"Uploaded photo: {NewPhoto.BucketName}/{NewPhoto.ObjectName}");


            _photoUrl = await MinioService.GetPhotoUrlAsync(NewPhoto);
            Logger.LogInformation($"New Photo Url: {_photoUrl}");
            
            if (OnPhotoChanged.HasDelegate)
            {
                await OnPhotoChanged.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Upload failed: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _photoUrl = await MinioService.GetPhotoUrlAsync(NewPhoto);
    }
}