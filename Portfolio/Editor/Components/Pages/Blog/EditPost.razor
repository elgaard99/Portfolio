@inject MinioService MinioService

<div class="container py-4">
    
    <!-- Title -->
    <div class="mb-4">
        <InputText @bind-Value="UpdatedPost.Title"
                   class="form-control form-control-lg fw-bold bg-transparent text-light border-0 border-bottom border-primary"
                   placeholder="Enter post title..."/>
    </div>

    <!-- Date & Goal -->
    <div class="d-flex flex-wrap align-items-center gap-3 mb-4 text-muted">
        <div>
            <label class="form-label small mb-1 text-secondary">Publish Date</label>
            <InputDate @bind-Value="UpdatedPost.PublishDate"
                       class="form-control form-control-sm bg-transparent text-light border-0 border-bottom border-secondary"/>
        </div>

        <div class="flex-grow-1">
            <label class="form-label small mb-1 text-secondary">MÃ¥l</label>
            <InputText @bind-Value="UpdatedPost.Goal"
                       class="form-control form-control-sm bg-transparent text-light border-0 border-bottom border-secondary w-100"
                       placeholder="Enter goal..."/>
        </div>
    </div>

    <!-- Content -->
    <div class="mb-4">
        <label class="form-label text-secondary small">Content</label>
        <InputTextArea @bind-Value="UpdatedPost.Content"
                       class="form-control bg-transparent text-light border border-primary rounded-3 p-3"
                       style="min-height: 220px;"
                       placeholder="Write your blog content here..."/>
    </div>

    <!-- Visibility toggle -->
    <div class="form-check form-switch mb-5">
        <InputCheckbox @bind-Value="UpdatedPost.IsVisible" class="form-check-input" id="visibilityToggle"/>
        <label class="form-check-label text-light ms-2" for="visibilityToggle">
            @(UpdatedPost.IsVisible ? "Visible to readers" : "Hidden (draft)")
        </label>
    </div>

    <!-- Photo Gallery -->
    <div class="photo-list mt-5">
        @if (UpdatedPost.Photos?.Count > 0)
        {
            <div class="row g-4">
                @foreach (var photo in UpdatedPost.Photos)
                {
                    <div class="row row-sm-6 row-md-4 row-lg-3">
                        <div class="card h-100 bg-secondary border-0 shadow-sm">
                            <div class="card-body p-3 d-flex flex-column justify-content-between">

                                <!-- Image area -->
                                <div class="photo-box mb-3">
                                    <UploadImage 
                                        NewPhoto="photo"
                                        BlogPost="UpdatedPost" 
                                        OnPhotoChanged="PhotoChanged" />
                                </div>

                                <!-- Delete button below -->
                                <div class="text-center mt-auto">
                                    <button class="btn btn-outline-danger btn-sm" 
                                            title="Delete Photo" 
                                            @onclick="@(() => DeletePhoto(photo))">
                                        <i class="bi bi-trash"></i> Slet
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-secondary text-center text-light bg-opacity-25 border-0" role="alert">
                No photos added yet.
            </div>
        }
    </div>
</div>


@code
{
    [Parameter]
    public BlogPost UpdatedPost { get; set; }
    
    [Parameter]
    public EventCallback<Photo> OnDeletePhoto { get; set; }
    
    async Task DeletePhoto(Photo photo)
    {
        if (OnDeletePhoto.HasDelegate)
            await OnDeletePhoto.InvokeAsync(photo);
    }
    
    [Parameter]
    public EventCallback OnPhotoChanged { get; set; }

    async Task PhotoChanged()
    {
        if (OnPhotoChanged.HasDelegate)
            await OnPhotoChanged.InvokeAsync();
        StateHasChanged();
    }
}
